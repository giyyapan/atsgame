var User = Class.sub();
User.prototype._init = function (game){
	this.userData;
}
User.prototype.getUserData = function (forceSync,callback){
	if (!forceSync && this.userData){
		return this.userData;
	}
	if (!localStorage.uuid){
		return false;
	}
	var self = this;
	Network.getUserData(false,function (res){
		self.userData = res.dataJStr;
		self.userData.userName = res.username;
		Static.setting = self.userData.setting;
		self = null;
		if (typeof callback === 'function'){
			callback();
		}
	});
	return this.userData;
}
User.prototype.updateUserData = function (silent){
	if (!this.userData){
		console.error("no userData when update!");
		return;
	}
	var dataJStr = JSON.stringify(this.userData);
	Network.updateUserData(dataJStr,this.encodeUserData(),this.encodeKey,silent);
}
User.prototype.getChallengeScores = function (challengeName){
	var scoresArray = null;
	Network.getChallengeScores(challengeName,function (res){
		scoresArray = res.scoresArray;
		//console.log('enter1');
	});
	//console.log('enter2');
	if (scoresArray.length < 30){
		for (var i = scoresArray.length - 1; i < 30; i++){
			scoresArray.push({username:"---",score:"---",time:'---'});
		}
	}
	return scoresArray;
}
User.prototype.uploadChallengeScore = function (){
	//not a async func
	var data = this.lastChallengeData;
	var username = this.getUserData().userName;
	var value = this.encodeChallengeScoreData(data.challengeName,username,data.score);

	var self = this;
	Network.uploadChallengeScore(data.challengeName,username,data.score,value,data.time,this.challengeUploadKey,function (res){
		self.lastChallengeData.scoreRank = res.number;
	});
	self = null;
}
User.prototype.newClearData = function (){
    this.userData = {
		//all clear version
		userName:"Aria",
		difficaulty:1,
		clearedStageNo:14,
		availElves:["water","fire","wind","earth","thunder"],
		elves:["water","fire","wind"],
		availTowers:["normalTower","laserTower","waveTower","spellTower","heavyNormalTower","heavyLaserTower","heavyWaveTower","heavySpellTower"],
		towers:["normalTower","laserTower","waveTower"],
		spell:{
			water:["rain","torrent","gift"],
			fire:["sacrifice","fireRain","hellFire"],
			wind:["blast","sway","strike"],
			thunder:["lightning","trial","radiance"],
			earth:["nourish","ravines","impact"],
		},
		stageFailureData:{2:{mena:300,time:5},3:{mena:200,time:3}},
		challengeScore:{
		waterChallenge:[{score:5000,time:6340},{score:3000,time:400},{score:2000,time:400}],
		fireChallenge:[{score:55300,time:400},{score:3000,time:400},{name:"Giyya",score:1000,time:400}],
		windChallenge:[{score:3000,time:400},{score:200,time:400},{score:100,time:400}],
		earthChallenge:[{score:3000,time:400},{score:30000,time:400}],
		thunderChallenge:[],
		finalChallenge:[],
		},
		sumScore:0,
		highScore:[],
		setting:{
			frameRate:70,
			skipClearedStory:false,
			getFailReward:true,
		}
    }
}
User.prototype.newUserData = function (){
    this.userData = {
		//default version
		userName:null,
		clearedStageNo:-1,
		stageFailureData:{},
		difficaulty:1,
		availElves:[],
		elves:[],
		availTowers:["normalTower","laserTower"],
		towers:["normalTower","laserTower"],
		spell:{
			water:[],
			fire:[],
			wind:[],
			thunder:[],
			earth:[],
		},
		challengeScore:{
			waterChallenge:[],
			fireChallenge:[],
			windChallenge:[],
			earthChallenge:[],
			thunderChallenge:[],
			finalChallenge:[],
		},
		sumScore:0,
		highScore:[],
		setting:{
			frameRate:70,
			skipClearedStory:true,
			getFailReward:true,
		}
    }
    //this.newClearData();
	Static.setting = this.userData.setting;
	return this.userData;
}
User.prototype.encodeUserData = function (){
	eval(function(p,a,c,k,e,r){e=function(c){return c.toString(36)};if('0'.replace(0,e)==0){while(c--)r[e(c)]=k[c];k=[function(e){return r[e]||e}];e=function(){return'[68k-r]'};c=1};while(c--)if(k[c])p=p.replace(new RegExp('\\b'+e(c)+'\\b','g'),k[c]);return p}('8.l={p:new Date().getTime()};a=\'anqwer\';b=\'iiopw\';c=\'2212\';d=\'122\';e=\'vbnm\';f=a.m(2,10)+b.m(1,1);q=22112;dataJStr=n;k=0;for(i=0;i<a.r;i++){k+=a.charCodeAt(i)}k.toString(2);k^=q;g=a.6(3,5)+f;h=f+c.6(0,3);i=(h+g).m(0,7);j=i.6(0,4)+e+i.6(4,9)+d.6(0,d.r-1);o=8.l.o=n(8.l.p+j);out=n(JSON.stringify(8.getUserData())+\'\'+o);',[],28,'||||||slice||this||||||||||||sum|encodeKey|substring|calcMD5|key|time|decodeKey|length'.split('|'),0,{}))

	return out;
}
User.prototype.encodeChallengeScoreData = function (challengeName,username,score){
	this.challengeUploadKey = {time:new Date().getTime()};
	a = 'anqwer';
	b = 'iiopw';
	c = '2212';
	d = '122';
	e = 'vbnm';
	f = a.substring(2,10) + b.substring(1,1);

	decodeKey = 22112;
	dataJStr = calcMD5;
	sum = 0;
	for (i = 0; i < a.length; i++){
		sum += a.charCodeAt(i);
	}
	sum.toString(2);
	sum ^= decodeKey;
	
	g = a.slice(3,5) + f;
	h = f + c.slice(0,3);
	i = (h + g).substring(0,7);
	j = i.slice(0,4)+e+i.slice(4,9)+d.slice(0,d.length-1);
	
	key = this.challengeUploadKey.key
		= calcMD5(this.challengeUploadKey.time + j);
	
	out = calcMD5(challengeName+''+username+''+score+''+key);
	
	return out;
}